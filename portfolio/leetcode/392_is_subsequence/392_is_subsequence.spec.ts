/**
 * @format
 * -----
 * Project: TGTGamer
 * File: 392_is_subsequence.spec.ts
 * Path: \portfolio\LeetCode\392_is_subsequence\392_is_subsequence.spec.ts
 * Created Date: Tuesday, January 16th 2024
 * Author: Jonathan Stevens (Email: jonathan@resnovas.com, Github: https://github.com/TGTGamer)
 * -----
 * Contributing: Please read through our contributing guidelines. Included are directions for opening
 * issues, coding standards, and notes on development. These can be found at https://github.com/TGTGamer/blob/develop/CONTRIBUTING.md
 * 
 * Code of Conduct: This project abides by the Contributor Covenant, version 2.0. Please interact in ways that contribute to an open,
 * welcoming, diverse, inclusive, and healthy community. Our Code of Conduct can be found at https://github.com/TGTGamer/blob/develop/CODE_OF_CONDUCT.md
 * -----
 * Copyright (c) 2024 Resnovas - All Rights Reserved
 * LICENSE: Creative Commons Zero v1.0 Universal (CC0-1.0)
 * -----
 * This program has been provided under confidence of the copyright holder and is 
 * licensed for copying, distribution and modification under the terms of
 * the Creative Commons Zero v1.0 Universal (CC0-1.0) published as the License,
 * or (at your option) any later version of this license.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Creative Commons Zero v1.0 Universal for more details.
 * 
 * You should have received a copy of the Creative Commons Zero v1.0 Universal
 * along with this program. If not, please write to: jonathan@resnovas.com,
 * or see https://creativecommons.org/publicdomain/zero/1.0/legalcode
 * 
 * DELETING THIS NOTICE AUTOMATICALLY VOIDS YOUR LICENSE - PLEASE SEE THE LICENSE FILE FOR DETAILS
 */

import { IsSubsequence } from './392_is_subsequence.js';

// Generated by CodiumAI

describe('IsSubsequence', () => {

    // Returns true when s is an empty string
    it('should return true when s is an empty string', () => {
      // Given an empty string s
      const s = '';
      // And a non-empty string t
      const t = 'abcde';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be true
      expect(result).toBe(true);
    });

    // Returns true when s is a single character and exists in t
    it('should return true when s is a single character and exists in t', () => {
      // Given a single character string s that exists in t
      const s = 'a';
      const t = 'abcde';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be true
      expect(result).toBe(true);
    });

    // Returns true when s is a substring of t
    it('should return true when s is a substring of t', () => {
      // Given a string s that is a substring of t
      const s = 'abc';
      const t = 'abcdefg';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be true
      expect(result).toBe(true);
    });

    // Returns true when s is equal to t
    it('should return true when s is equal to t', () => {
      // Given a string s that is equal to t
      const s = 'abcde';
      const t = 'abcde';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be true
      expect(result).toBe(true);
    });

    // Returns true when s is a subsequence of t
    it('should return true when s is a subsequence of t', () => {
      // Given a string s that is a subsequence of t
      const s = 'ace';
      const t = 'abcdefg';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be true
      expect(result).toBe(true);
    });

    // Returns false when s is not a substring of t
    it('should return false when s is not a substring of t', () => {
      // Given a string s that is not a substring of t
      const s = 'xyz';
      const t = 'abcdefg';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be false
      expect(result).toBe(false);
    });

    // Returns false when s is longer than t
    it('should return false when s is longer than t', () => {
      // Given a string s that is longer than t
      const s = 'abcdefg';
      const t = 'abc';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be false
      expect(result).toBe(false);
    });

    // Returns false when s is empty and t is not
    it('should return false when s is empty and t is not', () => {
      // Given an empty string s and a non-empty string t
      const s = '';
      const t = 'abcde';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be false
      expect(result).toBe(false);
    });

    // Returns false when s is not a subsequence of t
    it('should return false when s is not a subsequence of t', () => {
      // Given a string s that is not a subsequence of t
      const s = 'acd';
      const t = 'abcdefg';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be false
      expect(result).toBe(false);
    });

    // Returns true when s is a single character and does not exist in t
    it('should return true when s is a single character and does not exist in t', () => {
      // Given a single character string s that does not exist in t
      const s = 'x';
      const t = 'abcde';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be true
      expect(result).toBe(true);
    });

    // Returns true when s is a single character and exists multiple times in t
    it('should return true when s is a single character and exists multiple times in t', () => {
      // Given a single character string s that exists multiple times in t
      const s = 'a';
      const t = 'abcdeade';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be true
      expect(result).toBe(true);
    });

    // Returns true when s is a substring of t, but not a subsequence
    it('should return true when s is a substring of t, but not a subsequence', () => {
      // Given a string s that is a substring of t, but not a subsequence
      const s = 'abc';
      const t = 'abdcdefg';
  
      // When we invoke the IsSubsequence function with s and t
      const result = IsSubsequence(s, t);
  
      // Then the result should be true
      expect(result).toBe(true);
    });
});
